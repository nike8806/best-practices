import React from 'react';
import Enzyme, { shallow } from 'enzyme';
import Modal from './Modal';

// TODO: Put this configuration in just one place
import Adapter from 'enzyme-adapter-react-16';
Enzyme.configure({ adapter: new Adapter() });

describe('Modal component', () => {
  let component, props;

  describe('With minimal config', () => {
    beforeAll(() => {
      component = shallow(<Modal><p>Simple modal content</p></Modal>);
    });

    it('should render correctly with minimal config', () => {
      expect(component).toMatchSnapshot();
    });

    it('should have a base className for container element', () => {
      expect(component.find('.modal').length).toBe(1);
    });

    it('should have a base className for overlay element', () => {
      expect(component.find('.modal-backdrop').length).toBe(1);
    });

    it('should have a base className for dialog element', () => {
      expect(component.find('.modal-dialog').length).toBe(1);
    });

    it('should have a base className for content element', () => {
      expect(component.find('.modal-content').length).toBe(1);
    });

    it('should have a base className for body element', () => {
      expect(component.find('.modal-body').length).toBe(1);
    });

    it('should not render a title element because it is not provided', () => {
      expect(component.find('.modal-title').length).toBe(0);
    });

    it('should not render a header element because it is not provided', () => {
      expect(component.find('.modal-header').length).toBe(0);
    });

    it('should not render a footer element because it is not provided', () => {
      expect(component.find('.modal-footer').length).toBe(0);
    });
  });

  describe('With all basic handled attributes and a title', () => {
    beforeAll(() => {
      component = shallow(<Modal
          title="Modal Title"
          footer={<p>Footer content</p>}
          className="my-modal"
          overlayClassName="my-modal-overlay"
          dialogClassName="my-modal-dialog"
          contentClassName="my-modal-content"
          titleClassName="my-modal-title"
          headerClassName="my-modal-header"
          bodyClassName="my-modal-body"
          footerClassName="my-modal-footer"
        >
          <p>Modal content</p>
          <p>with custom styling</p>
        </Modal>);
      props = component.instance().props;
    });

    it('should render correctly with all basic handled attributes', () => {
      expect(component).toMatchSnapshot();
    });

    it('should have a base className for container element', () => {
      expect(component.find('.modal').length).toBe(1);
    });

    it('should have a base className for overlay element', () => {
      expect(component.find('.modal-backdrop').length).toBe(1);
    });

    it('should have a base className for dialog element', () => {
      expect(component.find('.modal-dialog').length).toBe(1);
    });

    it('should have a base className for content element', () => {
      expect(component.find('.modal-content').length).toBe(1);
    });

    it('should have a base className for body element', () => {
      expect(component.find('.modal-body').length).toBe(1);
    });

    it('should have a base className for title element', () => {
      expect(component.find('.modal-title').length).toBe(1);
    });

    it('should have a base className for header element', () => {
      expect(component.find('.modal-header').length).toBe(1);
    });

    it('should have a base className for footer element', () => {
      expect(component.find('.modal-footer').length).toBe(1);
    });

    it('should have a custom className for container element', () => {
      expect(component.find('.modal.my-modal').length).toBe(1);
      expect(props.className).toBe('my-modal');
    });

    it('should have a custom className for overlay element', () => {
      expect(component.find('.modal-backdrop.my-modal-overlay').length).toBe(1);
      expect(props.overlayClassName).toBe('my-modal-overlay');
    });

    it('should have a custom className for dialog element', () => {
      expect(component.find('.modal-dialog.my-modal-dialog').length).toBe(1);
      expect(props.dialogClassName).toBe('my-modal-dialog');
    });

    it('should have a custom className for content element', () => {
      expect(component.find('.modal-content.my-modal-content').length).toBe(1);
      expect(props.contentClassName).toBe('my-modal-content');
    });

    it('should have a custom className for title element', () => {
      const title = component.find('.modal-title.my-modal-title');
      expect(title.length).toBe(1);
      expect(title.text()).toBe('Modal Title');
      expect(props.titleClassName).toBe('my-modal-title');
    });

    it('should have a custom className for header element', () => {
      expect(component.find('.modal-header.my-modal-header').length).toBe(1);
      expect(props.headerClassName).toBe('my-modal-header');
    });

    it('should have a custom className for body element', () => {
      expect(component.find('.modal-body.my-modal-body').length).toBe(1);
      expect(props.bodyClassName).toBe('my-modal-body');
    });

    it('should have a custom className for footer element', () => {
      const footer = component.find('.modal-footer.my-modal-footer');
      expect(footer.length).toBe(1);
      expect(footer.text()).toBe('Footer content');
      expect(props.footerClassName).toBe('my-modal-footer');
    });
  });

  describe('With all basic handled attributes and a header', () => {
    beforeAll(() => {
      component = shallow(<Modal
          header={<h1>Modal Header</h1>}
          footer={<p>Footer content</p>}
          className="my-modal"
          overlayClassName="my-modal-overlay"
          dialogClassName="my-modal-dialog"
          contentClassName="my-modal-content"
          titleClassName="my-modal-title"
          headerClassName="my-modal-header"
          bodyClassName="my-modal-body"
          footerClassName="my-modal-footer"
        >
          <p>Modal content</p>
          <p>with custom styling</p>
          <p>and a header</p>
        </Modal>);
      props = component.instance().props;
    });

    it('should render correctly with all basic handled attributes', () => {
      expect(component).toMatchSnapshot();
    });

    it('should have a base className for container element', () => {
      expect(component.find('.modal').length).toBe(1);
    });

    it('should have a base className for overlay element', () => {
      expect(component.find('.modal-backdrop').length).toBe(1);
    });

    it('should have a base className for dialog element', () => {
      expect(component.find('.modal-dialog').length).toBe(1);
    });

    it('should have a base className for content element', () => {
      expect(component.find('.modal-content').length).toBe(1);
    });

    it('should have a base className for body element', () => {
      expect(component.find('.modal-body').length).toBe(1);
    });

    it('should not render a title element', () => {
      expect(component.find('.modal-title').length).toBe(0);
    });

    it('should have a base className for header element', () => {
      const header = component.find('.modal-header');
      expect(header.length).toBe(1);
      expect(header.text()).toBe('Modal Header');
    });

    it('should have a base className for footer element', () => {
      expect(component.find('.modal-footer').length).toBe(1);
    });

    it('should have a custom className for container element', () => {
      expect(component.find('.modal.my-modal').length).toBe(1);
      expect(props.className).toBe('my-modal');
    });

    it('should have a custom className for overlay element', () => {
      expect(component.find('.modal-backdrop.my-modal-overlay').length).toBe(1);
      expect(props.overlayClassName).toBe('my-modal-overlay');
    });

    it('should have a custom className for dialog element', () => {
      expect(component.find('.modal-dialog.my-modal-dialog').length).toBe(1);
      expect(props.dialogClassName).toBe('my-modal-dialog');
    });

    it('should have a custom className for content element', () => {
      expect(component.find('.modal-content.my-modal-content').length).toBe(1);
      expect(props.contentClassName).toBe('my-modal-content');
    });

    it('should have a custom className for header element', () => {
      expect(component.find('.modal-header.my-modal-header').length).toBe(1);
      expect(props.headerClassName).toBe('my-modal-header');
    });

    it('should have a custom className for body element', () => {
      expect(component.find('.modal-body.my-modal-body').length).toBe(1);
      expect(props.bodyClassName).toBe('my-modal-body');
    });

    it('should have a custom className for footer element', () => {
      const footer = component.find('.modal-footer.my-modal-footer');
      expect(footer.length).toBe(1);
      expect(footer.text()).toBe('Footer content');
      expect(props.footerClassName).toBe('my-modal-footer');
    });
  });

  describe('With all basic handled attributes and both a header and a title', () => {
    beforeAll(() => {
      component = shallow(<Modal
          title="Modal Title"
          header={<h1>Modal Header</h1>}
          footer={<p>Footer content</p>}
          className="my-modal"
          overlayClassName="my-modal-overlay"
          dialogClassName="my-modal-dialog"
          contentClassName="my-modal-content"
          titleClassName="my-modal-title"
          headerClassName="my-modal-header"
          bodyClassName="my-modal-body"
          footerClassName="my-modal-footer"
        >
          <p>Modal content</p>
          <p>with custom styling</p>
        </Modal>);
      props = component.instance().props;
    });

    it('should render correctly with all basic handled attributes', () => {
      expect(component).toMatchSnapshot();
    });

    it('should have a base className for container element', () => {
      expect(component.find('.modal').length).toBe(1);
    });

    it('should have a base className for overlay element', () => {
      expect(component.find('.modal-backdrop').length).toBe(1);
    });

    it('should have a base className for dialog element', () => {
      expect(component.find('.modal-dialog').length).toBe(1);
    });

    it('should have a base className for content element', () => {
      expect(component.find('.modal-content').length).toBe(1);
    });

    it('should have a base className for body element', () => {
      expect(component.find('.modal-body').length).toBe(1);
    });

    it('should not render a title element', () => {
      expect(component.find('.modal-title').length).toBe(0);
    });

    it('should have a base className for header element', () => {
      const header = component.find('.modal-header');
      expect(header.length).toBe(1);
      expect(header.text()).toBe('Modal Header');
    });

    it('should have a base className for footer element', () => {
      expect(component.find('.modal-footer').length).toBe(1);
    });

    it('should have a custom className for container element', () => {
      expect(component.find('.modal.my-modal').length).toBe(1);
      expect(props.className).toBe('my-modal');
    });

    it('should have a custom className for overlay element', () => {
      expect(component.find('.modal-backdrop.my-modal-overlay').length).toBe(1);
      expect(props.overlayClassName).toBe('my-modal-overlay');
    });

    it('should have a custom className for dialog element', () => {
      expect(component.find('.modal-dialog.my-modal-dialog').length).toBe(1);
      expect(props.dialogClassName).toBe('my-modal-dialog');
    });

    it('should have a custom className for content element', () => {
      expect(component.find('.modal-content.my-modal-content').length).toBe(1);
      expect(props.contentClassName).toBe('my-modal-content');
    });

    it('should have a custom className for header element', () => {
      expect(component.find('.modal-header.my-modal-header').length).toBe(1);
      expect(props.headerClassName).toBe('my-modal-header');
    });

    it('should have a custom className for body element', () => {
      expect(component.find('.modal-body.my-modal-body').length).toBe(1);
      expect(props.bodyClassName).toBe('my-modal-body');
    });

    it('should have a custom className for footer element', () => {
      const footer = component.find('.modal-footer.my-modal-footer');
      expect(footer.length).toBe(1);
      expect(footer.text()).toBe('Footer content');
      expect(props.footerClassName).toBe('my-modal-footer');
    });
  });

  describe('With onDismiss handler', () => {
    let clickHandler;
    beforeAll(() => {
      clickHandler = jest.fn();
      component = shallow(<Modal onDismiss={ clickHandler }><p>Simple modal content</p></Modal>);
    });

    it('should trigger onDismiss handler when clicking the overlay', () => {
      const overlay = component.find('.modal-backdrop');
      overlay.simulate('click');
      expect(clickHandler).toHaveBeenCalled();
    });
  });

  describe('Without onDismiss handler', () => {
    beforeAll(() => {
      component = shallow(<Modal><p>Simple modal content</p></Modal>);
    });

    it('should not trigger onDismiss handler when clicking the overlay if the handler is not provided', () => {
      const overlay = component.find('.modal-backdrop');
      const handler = jest.fn(component.instance().handleClickOutside);
      overlay.simulate('click');
      expect(handler).not.toHaveBeenCalled();
    });
  });
});
