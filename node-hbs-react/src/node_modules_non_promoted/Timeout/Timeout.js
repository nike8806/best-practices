import { Component } from 'react';
import PropTypes from 'prop-types';

/**
 * Timeout Component
 *
 * Render child components with a timer.
 */
class Timeout extends Component {
  static propTypes = {
    children: PropTypes.node,
    delay: PropTypes.number,
    onTimeout: PropTypes.func,
    renderAfter: PropTypes.bool
  };

  static defaultProps = {
    delay: 5000,
    onTimeout: null,
    children: null,
    renderAfter: false
  };

  state = {
    waiting: true
  };

  componentDidMount() {
    this.timer = setTimeout(this.handleTimeout, this.props.delay);
  }

  componentWillUnmount() {
    clearTimeout(this.timer);
  }

  handleTimeout = () => {
    const {
      onTimeout
    } = this.props;

    this.setState({
      waiting: false
    });

    if (onTimeout) {
      onTimeout();
    }
  }

  /**
   * Render method
   *
   * @return {ReactElement}
   */
  render() {
    const {
      renderAfter,
      children
    } = this.props;

    const {
      waiting
    } = this.state;

    const shouldRender = (!renderAfter && waiting) || (renderAfter && !waiting);

    if (shouldRender) {
      return children;
    }

  return null;
  }
}

export default Timeout;
