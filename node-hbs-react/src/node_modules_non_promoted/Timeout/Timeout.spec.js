import React from 'react';
import Enzyme, { mount, shallow } from 'enzyme';
import Timeout from './TimeOut';


// TODO: Put this configuration in just one place
import Adapter from 'enzyme-adapter-react-16';
Enzyme.configure({ adapter: new Adapter() });

describe('KBA React component', () => {
  beforeEach(() => {
    jest.useFakeTimers();
  });

  describe('At mounting with render children before the delay expires', () => {
    let component;
    let onTimeoutStub;
    beforeEach(() => {
      onTimeoutStub = jest.fn();
      component = shallow(<Timeout delay={3000} onTimeout={onTimeoutStub}>
        <div className="someContent">Some content</div>
      </Timeout>);
    });
    it('should render correctly', () => {
      expect(component).toMatchSnapshot();
    });

    it('Should remove the children when the delay expires', () => {
      expect(component.update().find('.someContent').length).toBe(1);
      jest.runAllTimers();
      expect(component.update().find('.someContent').length).toBe(0);
    });

    it('Should execute the callback "onTimeout" when the delay expires', () => {
      jest.runAllTimers();
      expect(onTimeoutStub).toBeCalled();
    });
  });

  describe('At mounting with render children after delay expires ', () => {
    let component;
    let onTimeoutStub;
    beforeEach(() => {
      onTimeoutStub = jest.fn();
      component = shallow(
        <Timeout
          delay={3000}
          renderAfter={true}
          onTimeout={onTimeoutStub}>
          <div className="someContent">
            Some content
          </div>
        </Timeout>
      );
    });

    it('should render correctly', () => {
      expect(component).toMatchSnapshot();
    });

    it('Should render the children when the delay expires ', () => {
      expect(component.update().find('.someContent').length).toBe(0);
      jest.runAllTimers();
      expect(component.update().find('.someContent').length).toBe(1);
    });

    it('Should execute the callback "onTimeout" when the delay expires', () => {
      jest.runAllTimers();
      expect(onTimeoutStub).toBeCalled();
    });
  });

  describe('At mounting without delay prop', () => {
    let component;
    let onTimeoutStub;
    beforeEach(() => {
      onTimeoutStub = jest.fn();
      component = shallow(<Timeout onTimeout={onTimeoutStub}>
        <div className="someContent">Some content</div>
      </Timeout>);
    });
    it('should render correctly', () => {
      expect(component).toMatchSnapshot();
    });

    it('Should remove the children when the default delay expires ', () => {
      expect(component.update().find('.someContent').length).toBe(1);
      jest.runAllTimers();
      expect(component.update().find('.someContent').length).toBe(0);
    });

    it('Should execute the callback "onTimeout" when the default delay expires', () => {
      jest.runAllTimers();
      expect(onTimeoutStub).toBeCalled();
    });
  });

  describe('At Unmount', () => {
    let component;
    beforeEach(() => {
      jest.useFakeTimers();
      component = mount(<Timeout delay={3000}/>);
    });

    it('Should clear timeout when unmounting if there is no timeout running', () => {
      jest.runAllTimers();
      component.unmount();
      expect(clearTimeout).toHaveBeenCalled();
    });
  });
});
