import React from 'react';
import Enzyme, { shallow, mount } from 'enzyme';
import Input from './Input';

// TODO: Put this configuration in just one place
import Adapter from 'enzyme-adapter-react-16';
Enzyme.configure({ adapter: new Adapter() });

describe('Input component', () => {
  let component, props;

  describe('With minimal config', () => {
    beforeAll(() => {
      component = shallow(<Input />);
    });

    it('should render correctly with minimal config', () => {
      expect(component).toMatchSnapshot();
    });

    it('should render an input', () => {
      expect(component.find('input').length).toBe(1);
    });

    it('should have className', () => {
      expect(component.find('input.form-control').length).toBe(1);
    });

    it('should not render errorMessage div', () => {
      expect(component.find('div.error-message').length).toBe(0);
    });
  });

  describe('With all basic handled attributes', () => {
    beforeAll(() => {
      component = shallow(<Input
        type="text"
        required
        errorMessage="Value is required"
        errorClassName="control__input-invalid"
        errorTextClassName="control__input-text-invalid"
        className="control"
        inputClassName="control__input"
        />);
      props = component.instance().props;
    });

    it('should render correctly with all basic handled attributes', () => {
      expect(component).toMatchSnapshot();
    });

    it('should render an input', () => {
      expect(component.find('input').length).toBe(1);
    });

    it('should render an input type text', () => {
      expect(component.find('input[type="text"]').length).toBe(1);
    });

    it('should have className set for the input element', () => {
      expect(component.find('input.form-control.control__input').length).toBe(1);
      expect(props.inputClassName).toBe('control__input');
    });

    it('should render errorMessage div', () => {
      expect(component.find('div.error-message').length).toBe(1);
    });

    it('should render errorMessage div with a custom className', () => {
      expect(component.find('div.error-message.control__input-invalid').length).toBe(1);
      expect(props.errorClassName).toBe('control__input-invalid');
    });

    it('should render error message text div with a custom className', () => {
      expect(component.find('span.control__input-text-invalid').length).toBe(1);
      expect(props.errorTextClassName).toBe('control__input-text-invalid');
    });

    it('should render error message text div with a custom text', () => {
      expect(component.find('span.control__input-text-invalid').text()).toBe('Value is required');
      expect(props.errorTextClassName).toBe('control__input-text-invalid');
    });

    it('should render container div with a custom className', () => {
      expect(component.find('div.control').length).toBe(1);
      expect(props.className).toBe('control');
    });
  });

  describe('With error class names but no error message', () => {
    beforeAll(() => {
      component = shallow(<Input
        type="tel"
        required
        errorClassName="control__input-invalid"
        errorTextClassName="control__input-text-invalid"
        className="control"
        inputClassName="control__input"
        />);
      props = component.instance().props;
    });

    it('should render correctly with all basic handled attributes', () => {
      expect(component).toMatchSnapshot();
    });

    it('should render an input', () => {
      expect(component.find('input').length).toBe(1);
    });

    it('should render an input type tel', () => {
      expect(component.find('input[type="tel"]').length).toBe(1);
    });

    it('should have className set for the input element', () => {
      expect(component.find('input.form-control.control__input').length).toBe(1);
    });

    it('should not render errorMessage div', () => {
      expect(component.find('div.error-message').length).toBe(0);
    });

    it('should render container div with a custom className', () => {
      expect(component.find('div.control').length).toBe(1);
      expect(props.className).toBe('control');
    });
  });

  describe('Single props', () => {
    describe('With errorMessage prop', () => {
      beforeAll(() => {
        component = shallow(<Input
          type="date"
          errorMessage="Invalid date"
          />);
      });

      it('should render errorMessage div', () => {
        expect(component.find('div.error-message').length).toBe(1);
      });
    });

    describe('With className prop', () => {
      beforeAll(() => {
        component = shallow(<Input
          type="date"
          className="my-input"
          />);
        props = component.instance().props;
      });

      it('should render container div with a custom className', () => {
        expect(component.find('div.my-input').length).toBe(1);
        expect(props.className).toBe('my-input');
      });
    });

    describe('With inputClassName prop', () => {
      beforeAll(() => {
        component = shallow(<Input
          type="date"
          inputClassName="my-input"
          />);
        props = component.instance().props;
      });

      it('should have className set for the input element', () => {
        expect(component.find('input.form-control.my-input').length).toBe(1);
        expect(props.inputClassName).toBe('my-input');
      });
    });

    describe('With errorClassName prop', () => {
      beforeAll(() => {
        component = shallow(<Input
          type="date"
          errorClassName="my-input-error"
          />);
      });

      it('should not render errorMessage div', () => {
        expect(component.find('div.error-message').length).toBe(0);
      });
    });

    describe('With errorTextClassName prop', () => {
      beforeAll(() => {
        component = shallow(<Input
          type="date"
          errorTextClassName="my-input-error-text"
          />);
      });

      it('should not render errorMessage div', () => {
        expect(component.find('div.error-message').length).toBe(0);
      });
    });

    describe('With inputRef prop', () => {
      let ref, inputNode;
      beforeAll(() => {
        ref = jest.fn(input => {
          inputNode = input;
        });
        component = mount(<Input
          type="date"
          inputRef={ref}
          />);
      });

      it('should point the ref to the input element', () => {
        expect(ref).toHaveBeenCalled();
      });

      it('should set the inputNode as the ref to the input element', () => {
        expect(inputNode).toBeDefined();
      });

      it('should match with the input element node', () => {
        expect(inputNode.tagName).toBe('INPUT');
        expect(inputNode.type).toBe('date');
      });
    });
  });
});
