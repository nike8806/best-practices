const sinon = require('sinon');
const { assert } = require('chai');
const proxyquire = require('proxyquire');
const fixtures = require('../../../../test-helper');

const loggerErrorStub = sinon.stub();
const loggerWarnStub = sinon.stub();

let mock;
let middleware;

const primaryBorrower = {
  id: 123,
  firstName: 'TestName',
  lastName: 'TestLastName',
  email: 'email@email.com',
  primary: true
};

const configDefaultValues = {
  autoRoutes: {
    ACCOUNT: '/accountHome'
  },
  'app.zopim.token': 'SomeToken'
};

const setupContext = (configValues) => {
  const config = fixtures.config(configValues);
  return proxyquire('../zendesk-chat-context.js', {
    'lc-app-config': config,
    'lc-logger': {
      error: loggerErrorStub,
      warn: loggerWarnStub
    }
  });
};

describe('When zendesk Chat middleware is called', () => {
  before(() => {
    middleware = setupContext(configDefaultValues)();
  });

  beforeEach(() => {
    mock = fixtures.mock();
    mock.req.loanAppInProgress.borrowers = [primaryBorrower];
    loggerErrorStub.reset();
    loggerWarnStub.reset();
  });

  describe('When does not exist any error', () => {
    beforeEach(() => {
      middleware(mock.req, mock.res, mock.next);
    });

    it('Should add zendeskChatContext in req function and return the next() function ', () => {
      const zendeskChatContextExpected = {
        zendeskChatConfigStr: JSON.stringify({
          token: configDefaultValues['app.zopim.token'],
          name: primaryBorrower.firstName,
          email: primaryBorrower.email
        })
      };

      assert.isTrue(mock.next.calledOnce);
      assert.deepEqual(mock.req.zendeskChatContext, zendeskChatContextExpected);
    });
  });
  describe('When has ocurred an error', () => {
    it('Should log error and return next() function when AppInProggress info is incomplete', () => {
      mock.req.loanAppInProgress = {};
      middleware(mock.req, mock.res, mock.next);
      assert.isTrue(mock.next.calledOnce);
      assert.isTrue(loggerErrorStub.called);
      assert.isTrue(
        loggerErrorStub.calledWith('ZENDESK MIDDLEWARE: Error with loan AppInProggress info')
      );
    });

    it('Should log warn when the name is not included', () => {
      mock.req.loanAppInProgress.borrowers = [{
        id: 123,
        lastName: 'TestLastName',
        email: 'email@email.com',
        primary: true
      }];
      middleware(mock.req, mock.res, mock.next);
      assert.isTrue(loggerWarnStub.called);
      assert.isTrue(
        loggerWarnStub.calledWith(
          { borrowerId: mock.req.loanAppInProgressActorId },
          'ZENDESK MIDDLEWARE: Firstname was not found'
        )
      );
    });
    it('Should log warn when the email is not included', () => {
      mock.req.loanAppInProgress.borrowers = [{
        id: 123,
        firstName: 'TestName',
        lastName: 'TestLastName',
        primary: true
      }];
      middleware(mock.req, mock.res, mock.next);
      assert.isTrue(loggerWarnStub.called);
      assert.isTrue(
        loggerWarnStub.calledWith(
          { borrowerId: mock.req.loanAppInProgressActorId },
          'ZENDESK MIDDLEWARE: Email was not found'
        )
      );
    });
    it('Should log error and return next() function when zopim token is not found', () => {
      configDefaultValues['app.zopim.token'] = undefined;
      const middleware2 = setupContext(configDefaultValues)();
      middleware2(mock.req, mock.res, mock.next);
      assert.isTrue(mock.next.calledOnce);
      assert.isTrue(loggerErrorStub.called);
      assert.isTrue(
        loggerErrorStub.calledWith('ZENDESK MIDDLEWARE: Token has not found')
      );
    });
  });
});
