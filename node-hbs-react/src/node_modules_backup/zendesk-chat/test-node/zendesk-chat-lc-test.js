const { assert } = require('chai');
const sinon = require('sinon');

const { init: zendeskChatLcInit } = require('../zendesk-chat-lc');


const mockParams = {
  token: 'myToken',
  name: 'My Script Name',
  email: 'MyEmail@email.com'
};

const onloadSpy = sinon.spy();
const setNameSpy = sinon.spy();
const setEmailSpy = sinon.spy();
const zopimCallbacksSpy = {};
const zopimWindowCallbacksSpy = {};
const createElement = {
  async: sinon.spy(),
  setAttribute: sinon.spy(),
  onload: onloadSpy
};
const ZOPIM_CALLBACKS = [
  'setOnConnected',
  'setOnChatStart',
  'setOnChatEnd',
  'setOnStatus',
  'setOnUnreadMsgs'
];
const ZOPIM_WINDOW_CALLBACKS = [
  'onShow',
  'onHide'
];

const createElementStub = sinon.stub().callsFake(() => (createElement));

describe('Zendesk Chat module', () => {
  beforeEach(() => {
    global.document = {
      createElement: createElementStub,
    };
    const zopimObject = {
      livechat: {
        setName: setNameSpy,
        setEmail: setEmailSpy,
        window: {
          hide: () => {}
        }
      }
    };

    ZOPIM_CALLBACKS.forEach((callbackName) => {
      zopimCallbacksSpy[callbackName] = sinon.spy();
      zopimObject.livechat[callbackName] = zopimCallbacksSpy[callbackName];
    });

    ZOPIM_WINDOW_CALLBACKS.forEach((callbackName) => {
      zopimWindowCallbacksSpy[callbackName] = sinon.spy();
      zopimObject.livechat.window[callbackName] = zopimWindowCallbacksSpy[callbackName];
    });

    global.document.getElementsByTagName = () => [{
      parentNode: {
        insertBefore: () => {
          global.$zopim = zopimObject;
        }
      }
    }];
  });

  describe('When a zendesk global variable exists', () => {
    it('Should exit to the function', () => {
      global.$zopim = {};
      zendeskChatLcInit(mockParams);
      assert.equal(createElementStub.getCalls().length, 0, 'Was called');
    });
  });

  describe('When it is loaded correctly', () => {
    beforeEach(() => {
      global.$zopim = undefined;
      createElementStub.resetHistory();
    });

    it('Should document.createElement() should be called', () => {
      zendeskChatLcInit(mockParams);
      assert.equal(createElementStub.getCalls().length, 1, 'CreateElement Was not called');
    });

    describe('On call to onload Function', () => {
      beforeEach(() => {
        setNameSpy.reset();
        setEmailSpy.reset();
        onloadSpy.reset();
        ZOPIM_CALLBACKS.forEach((callbackName) => {
          zopimCallbacksSpy[callbackName].reset();
        });
        ZOPIM_WINDOW_CALLBACKS.forEach((callbackName) => {
          zopimWindowCallbacksSpy[callbackName].reset();
        });

        zendeskChatLcInit(mockParams);
        // Calling to onload after setup zopim conf
        onloadSpy();
        createElement.onload();
      });

      it('Should set name and email requested', () => {
        assert.equal(createElementStub.getCalls().length, 1, 'CreateElement Was not called');
        assert.equal(onloadSpy.getCalls().length, 1, 'Onload Was not called');
        assert.equal(setNameSpy.getCalls().length, 1, 'SetName was not called');
        assert.equal(setEmailSpy.getCalls().length, 1, 'SetEmail Was not called');
      });

      it('Should register the callback elements', () => {
        ZOPIM_CALLBACKS.forEach((callbackName) => {
          assert.equal(
            zopimCallbacksSpy[callbackName].getCalls().length, 1,
            `${callbackName} was not called`
          );
        });
        ZOPIM_WINDOW_CALLBACKS.forEach((callbackName) => {
          assert.equal(
            zopimWindowCallbacksSpy[callbackName].getCalls().length, 1,
            `${callbackName} was not called`
          );
        });
      });
    });

    describe('On onLoadCallback validation', () => {
      const onloadCallbackStub = sinon.stub();
      beforeEach(() => {
        onloadCallbackStub.resetHistory();
      });
      it('Should be executed a callback when is loaded (if it is included)', () => {
        zendeskChatLcInit(mockParams, onloadCallbackStub);
        // Calling to onload after setup zopim conf
        onloadSpy();
        createElement.onload();
        assert.equal(onloadCallbackStub.getCalls().length, 1, 'onloadCallback Was not called');
      });
      it('Should not execute a callback when is loaded (if it is not included)', () => {
        zendeskChatLcInit(mockParams);
        // Calling to onload after setup zopim conf
        onloadSpy();
        createElement.onload();
        assert.equal(onloadCallbackStub.getCalls().length, 0, 'onloadCallback Was not called');
      });
    });
  });
});
